void propertyToLua(lua_State* L, UProperty* p, void* data) {
        	LOG("Transforming from Property to Lua");
			auto c = p->GetClass()->ClassCastFlags;
			if (c & EClassCastFlags::CASTCLASS_UBoolProperty) {
				lua_pushboolean(L, *p->ContainerPtrToValuePtr<bool>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UIntProperty) {
				lua_pushinteger(L, *p->ContainerPtrToValuePtr<std::int32_t>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UInt64Property) {
				lua_pushinteger(L, *p->ContainerPtrToValuePtr<std::int64_t>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UFloatProperty) {
				lua_pushnumber(L, *p->ContainerPtrToValuePtr<float>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UStrProperty) {
				lua_pushstring(L, TCHAR_TO_UTF8(**p->ContainerPtrToValuePtr<FString>(data)));
			} else if (c & EClassCastFlags::CASTCLASS_UClassProperty) {
				LuaUClass::ConstructClass(L, *p->ContainerPtrToValuePtr<UClass*>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UObjectProperty) {
				LuaUObject::ConstructObject(L, *p->ContainerPtrToValuePtr<UObject*>(data));
			} else if (c & EClassCastFlags::CASTCLASS_UArrayProperty) {
				UArrayProperty* prop = Cast<UArrayProperty>(p);
				const FScriptArray& arr = prop->GetPropertyValue_InContainer(data);
				lua_newtable(L);
				for (int i = 0; i < arr.Num(); ++i) {
					FScriptArrayHelper Helper(prop, data);
					propertyToLua(L, prop->Inner, ((uint8*)Helper.GetRawPtr()) + (prop->Inner->ElementSize * (i)));
					lua_seti(L, -2, i+1);
				}
			} else {
				lua_pushnil(L);
			}
		}